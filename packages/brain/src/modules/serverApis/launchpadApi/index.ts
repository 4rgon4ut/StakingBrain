import express from "express";
import { tags as availableTags, Tag } from "@stakingbrain/common";
import logger from "../../logger/index.js";
import { brainDb, signerApi } from "../../../index.js";

export function startLaunchpadApi(): void {
  // Implement an API that will listen requests POST GET and DELETE
  // Import keystores generated by the Eth2.0 deposit CLI tooling. passwords[i] must unlock keystores[i].
  // The POST method must have a body with the following structure:
  // {
  // "keystores": [
  //   "{\"version\":4,\"uuid\":\"9f75a3fa-1e5a-49f9-be3d-f5a19779c6fa\",\"path\":\"m/12381/3600/0/0/0\",\"pubkey\":\"0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a\",\"crypto\":{\"kdf\":{\"function\":\"pbkdf2\",\"params\":{\"dklen\":32,\"c\":262144,\"prf\":\"hmac-sha256\",\"salt\":\"8ff8f22ef522a40f99c6ce07fdcfc1db489d54dfbc6ec35613edf5d836fa1407\"},\"message\":\"\"},\"checksum\":{\"function\":\"sha256\",\"params\":{},\"message\":\"9678a69833d2576e3461dd5fa80f6ac73935ae30d69d07659a709b3cd3eddbe3\"},\"cipher\":{\"function\":\"aes-128-ctr\",\"params\":{\"iv\":\"31b69f0ac97261e44141b26aa0da693f\"},\"message\":\"e8228bafec4fcbaca3b827e586daad381d53339155b034e5eaae676b715ab05e\"}}}"
  // ],
  // "passwords": [
  //   "ABCDEFGH01234567ABCDEFGH01234567"
  // ],
  // "slashing_protection": "{\"metadata\":{\"interchange_format_version\":\"5\",\"genesis_validators_root\":\"0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\"},\"data\":[{\"pubkey\":\"0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a\",\"signed_blocks\":[],\"signed_attestations\":[]}]}",
  // "tags": ["obol"],
  // "feeRecipients": ["0x0000000000000000000000000000000000000000"],
  // "pubkeys": ["0x0000000000000000000000000000000000000000"]
  // }
  // Responses:
  // 200 Success response
  // {
  // "data": [
  // {
  //    "status": "imported",
  //   "message": "string"
  //  }
  // ]
  //  }
  // 400 Bad request. Request was malformed and could not be processed
  // {
  // "message": "description of the error that occurred"
  // }
  // 401 Unauthorized, no token is found
  // {
  // "message": "description of the error that occurred"
  // }
  // 403 Forbidden, token is invalid
  // {
  // "message": "description of the error that occurred"
  // }
  // 500 Internal server error. The server encountered an unexpected error indicative of a serious fault in the system, or a bug.
  // {
  // "message": "description of the error that occurred"
  // }

  const app = express();
  app.use(express.json());
  app.post("/eth/v1/keystores", async (req, res) => {
    const {
      keystores,
      passwords,
      slashingProtection,
      tags,
      feeRecipients,
      pubkeys,
    } = req.body;

    // Validate request body
    const errors = validateRequestBody(
      keystores,
      passwords,
      slashingProtection,
      tags,
      feeRecipients,
      pubkeys
    );
    if (errors.length > 0)
      res.status(400).send({ message: `Bad request: ${errors.join(". ")}` });

    // Import keystores + passwords + slashingProtection onto the web3signer
    await signerApi
      .importKeystores({
        keystores,
        passwords,
        slashingProtection,
      })
      .catch((err) => {
        logger.error(err);
        res.status(500).send({ message: "Internal server error" });
      });

    // TODO: Load pubkeys and feeRecipients into validator

    // 4. Write data on db (even if 3 fails)
    // TODO: create the array of objects of pubkeys + feeRecipients + tags
    brainDb.addPubkeys(pubkeys);

    // 5. Return response
    res.status(200).send({
      data: [{ status: "imported", message: "successfully imported" }],
    });
  });

  app.listen(3000, () => {
    logger.info("Launchpad API listening on port 3000");
  });
}

function validateRequestBody(
  keystores: any,
  passwords: any,
  slashing_protection: any,
  tags: any,
  feeRecipients: any,
  pubkeys: any
): string[] {
  const errors: string[] = [];

  if (!keystores) errors.push("keystores parameter is required");
  if (!passwords) errors.push("passwords parameter is required");
  if (!slashing_protection)
    errors.push("slashing_protection parameter is required");
  if (!tags) errors.push("tags parameter is required");
  if (!feeRecipients) errors.push("feeRecipients parameter is required");

  if (keystores && !Array.isArray(keystores))
    errors.push("keystores must be an array of strings");
  if (passwords && !Array.isArray(passwords))
    errors.push("passwords must be an array of strings");
  if (tags && !Array.isArray(tags))
    errors.push("tags must be an array of strings");
  if (tags && !(tags as Tag[]).some((tag) => availableTags.includes(tag)))
    errors.push(
      "tags must be one of the following: " + availableTags.join(", ")
    );
  if (feeRecipients && !Array.isArray(feeRecipients))
    errors.push("feeRecipients must be an array of strings");

  if (
    keystores.length !== passwords.length ||
    keystores.length !== tags.length ||
    keystores.length !== feeRecipients.length
  )
    errors.push(
      "keystores, passwords, tags and feeRecipients must have the same length"
    );

  return errors;
}
